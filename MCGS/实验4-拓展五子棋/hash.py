import random
import ctypes

EMPTY = -1
WHITE = 0
BLACK = 1

board_size = 9

zobrist_table = [[[822637997094142775, 12508795894132437066, 10689889638297509933], [9663962515268869534, 9589171226982022325, 1479199061489495627], [9085054492383900284, 3391991760902130268, 1909608266117794714], [17023057392207119763, 14714495273985660838, 15899929723054627226], [18136553549692844771, 3283738959944244401, 5278302071944646322], [6968703016003460899, 12989708165009610173, 15733596618849270239], [6089240567571729661, 7812276676342229314, 18434513244574864782], [2336362090181474648, 12433505342988902102, 906029598418393611], [10797518448204798307, 14905045009470347166, 15684336768440235694]], [[14939636343738077895, 10740412836512614811, 12735719458053030035], [2136260299806991157, 2938925851429847726, 4997923713436337361], [3933503391033367587, 3392354606882326866, 5642864171064267037], [15179962200855658183, 17204159276528864800, 11007066168368847035], [6047530520095153011, 11798177061082745165, 11497865373468901625], [9502467870447595825, 16755724843567009201, 13486269831549472381], [1852844218965514349, 9525781845975254427, 117592457536566768], [6689634508592425471, 17985898266950167527, 18273917523412111101], [1407329841114983785, 1145395290332546175, 9112916569944749895]], [[2584712324548495695, 10953196792457223768, 14208429626862301366], [13865946813421469562, 16294562736977584824, 5590660372297434399], [15025390267214068081, 15222140859554841806, 16760910752866808899], [11905459150528956934, 15816303484757726621, 11341431017092062601], [15655455061278798596, 8673487588433730935, 3395496488091476029], [8390343032721446817, 3276789608302465424, 17350485440547528244], [11468215570516137467, 9812467408427797175, 8458559587044651559], [13995516319449276384, 11342833515880743511, 9584125083029043439], [4135937708104184977, 11977896643554345102, 2478655654432445666]], [[11272590063515033971, 5997085570796994010, 7982279123941348375], [2475086132565776266, 4969067604957088205, 16588004608789620485], [9787810019840190145, 2081063754919092394, 7883168640201132338], [12031565301299632580, 16497926438789588017, 14841887803736085070], [2444190322419804336, 11912211005568960032, 13125361838399870567], [6441945361112984937, 18427427858134128102, 17937259361023447836], [6788282283950362014, 16947485201065350811, 13654036350396317466], [4488682245972568676, 12189955183012201442, 15736838454277595327], [5903037257639269412, 7973760029119302207, 3194646278165743369]], [[7187955918997080999, 2389923754202366664, 17878832616588870054], [17713660149678228009, 1542284609585908561, 4022922262585275145], [9680471761498035851, 17903185328786216477, 2995118858792367026], [18436386011517870753, 6955594379152657234, 4646412099905726157], [8722978066219889775, 2148626349880778250, 13793885363287842040], [535352787118516130, 13381866720560015949, 6569814906255447125], [5042247933942368981, 9911705090779590851, 16386469572897565625], [9599800989079244816, 2141294075537756717, 7582868884252704672], [8500968125773181669, 14077167486307885900, 553197491108193551]], [[6312526894333614043, 15776036136304190435, 16074404354646458625], [16679877408282337498, 1901128491351823298, 5115758831358906760], [838459530410760752, 6051548547821472215, 13281623136020183043], [9728058030258782801, 12697813693669225635, 10791291698023997061], [1039880026285435105, 5525275019891167434, 17992365504399731052], [14719106795676102329, 15478374978083128728, 6898671304304161576], [11806701756868573335, 17520886275491325927, 5460991871994183545], [12943545013860942927, 2081405206124767364, 10488483107876301610], [10292005977965485450, 5339808793159822262, 5634399404952854591]], [[152067829709677679, 6047865393387706897, 4718088008373795626], [15601533551121729537, 15574036004806359578, 9558956868134636767], [15256616290246510368, 1380123990575934574, 12580174618699908679], [6143830695443593106, 9383872505448223299, 16778950998508362395], [14089297520789016324, 1715026451220577566, 10115676739190593029], [17598973915570207819, 2582646542312628126, 9568759392746571894], [14055049673323417919, 10114758397148971786, 4095168737565776530], [14529477846182510266, 10187343832134824498, 10872499959221856708], [9343481702414966159, 4151925696932754801, 8423693902480203731]], [[4268142213486266950, 5058341653617862886, 8008906701846711550], [11068951223869966225, 12212493098852127430, 7069785215521110457], [7781708103099727243, 13452800485764499276, 8989567749785214056], [16060082555604010134, 7852873139217149019, 2194284221385339311], [10834206821213791462, 17996063577522357537, 14469261847523884657], [15843826697490555670, 6077974419155040471, 5251247680212877873], [12464984648405899514, 8505555447829385312, 8485487414099802110], [5036221658854254823, 1810393594287029441, 3848424167313492984], [11570136446095790978, 7429865098003528817, 1453721469837705151]], [[2706437484247638964, 13328958550225346378, 7424520982512211747], [163518534187422968, 3155444837769007833, 8771081164908337107], [13409561115718374855, 6800451817459072531, 6109413697845807950], [1705574382194746467, 94311057787662193, 7531130402971342148], [14913704184792002762, 10036347854478803054, 11264057911621732503], [16020702703259342505, 6837346457395637254, 10343024151012239616], [6146495335233310409, 3329477336269552802, 8841945845327298914], [6863256483866694422, 10903363040863582375, 5451870650012862011], [12114179451258397927, 11128699420274182769, 16698759899514816013]]]

def initialize_zobrist_table(board_size):
    # 三种状态：0-空，1-黑子，2-白子
    return [[[random.getrandbits(64) for _ in range(3)] for _ in range(board_size)] for _ in range(board_size)]

def compute_zobrist_hash(state):
    board = [[EMPTY for _ in range(9)] for _ in range(9)]  # 示例：11x11空棋盘
    for action in state:
        board[action//9][action%9] = state[action]

    empty_num = 0
    hash_value = 0
    for i in range(9):
        for j in range(9):
            if board[i][j] == EMPTY:
                state = 0
                empty_num += 1
            elif board[i][j] == WHITE:
                state = 2
            else:
                state = 1
            # state = board[i][j]  # 0 for empty, 1 for black, 2 for white
            hash_value ^= zobrist_table[i][j][state]
    return ctypes.c_int64(hash_value).value, 81-empty_num  # Ensure the hash is in int64 range


def test(board):

    empty_num = 0
    hash_value = 0
    for i in range(9):
        for j in range(9):
            if board[i][j] == EMPTY:
                state = 0
                empty_num += 1
            elif board[i][j] == WHITE:
                state = 2
            else:
                state = 1
            # state = board[i][j]  # 0 for empty, 1 for black, 2 for white
            hash_value ^= zobrist_table[i][j][state]
    return ctypes.c_int64(hash_value).value, 81-empty_num  # Ensure t
# 测试
# board_size = 11
#
# board = [[EMPTY for _ in range(board_size)] for _ in range(board_size)]  # 示例：11x11空棋盘
# board[0][0] = BLACK
# print(board)
# board[1][1] = WHITE
# print(board)
# print(f"Zobrist Hash: {test(board)}")
#
#
# board = [[EMPTY for _ in range(board_size)] for _ in range(board_size)]  # 示例：11x11空棋盘
# board[1][1] = WHITE
# print(board)
# board[0][0] = BLACK
# board[0][1] = BLACK
# print(board)
# print(f"Zobrist Hash: {test(board)}")

# 7849364585003502690
# hash_value = compute_zobrist_hash(board, zobrist_table)
#
# print(initialize_zobrist_table(9))
